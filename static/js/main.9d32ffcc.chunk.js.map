{"version":3,"sources":["components/Die.tsx","components/DiceColumn.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Die","props","className","isRolling","dieValue","map","value","DiceColumn","die1Value","die2Value","die3Value","die4Value","die5Value","word","onClick","handleReRollClick","columnIndex","disabled","disableButtons","wordList","require","fingerKeyMap","App","useState","wordCount","setWordCount","fingerMapType","setFingerMapType","showDice","setShowDice","passPhase","setPassPhase","practicePassPhase","setPracticePassPhase","Map","isColumnRollingMap","setIsColumnRollingMap","updateIsColumnRollingMap","set","diceValueMap","setDiceValueMap","updateDiceValueMap","dieIndex","diceColumnMap","get","dieMap","wordMap","setWordMap","updateWordMap","wordIndex","isMounted","setIsMounted","practicePassPhaseInputElement","useRef","setIsRolling","handleWordCountClick","count","handleRollDiceClick","a","i","previousWordLastCharacter","dieResultMap","1","2","3","4","5","wordFound","j","rollResult","Math","floor","random","wordNumber","newWord","newWordFirstCharacter","substring","isNewWordAllow","length","sleep","result","Array","from","entries","reduce","wordEntry","push","join","current","focus","getSeparateWordCharacterClass","character","characterIndex","characterClass","startingIndex","indexOf","getCharacterClass","previousCharacter","newCharacter","ms","Promise","resolve","setTimeout","newWordLastCharacter","previousWord","nextWord","nextWordFirstCharacter","useEffect","type","onChange","e","target","fill","index","split","event","ref","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d32ffcc.chunk.js","sourcesContent":["import './Die.css';\n\ntype DieProperties = {\n  isRolling: boolean;\n  dieValue: number;\n};\n\nfunction Die(props: DieProperties) {\n  function renderSides() {\n    const sides = [1, 2, 3, 4, 5, 6].map((value) => {\n      return (\n        <div className=\"side\" key={value}>\n          {value}\n        </div>\n      );\n    });\n\n    return sides;\n  }\n\n  return (\n    <div className=\"die-container\">\n      <div\n        className={`die ${props.isRolling ? 'rolling d6' : 'd6'} ${\n          props.dieValue ? 'd' + props.dieValue + '-roll' : ''\n        }`}\n      >\n        {renderSides()}\n      </div>\n    </div>\n  );\n}\n\nexport default Die;\n","import Die from './Die';\nimport './DiceColumn.css';\n\ntype RandomizedDiceColumnProperties = {\n  columnIndex: number;\n  isRolling: boolean;\n  word: string;\n  die1Value: number;\n  die2Value: number;\n  die3Value: number;\n  die4Value: number;\n  die5Value: number;\n  disableButtons: boolean;\n  handleReRollClick: (columnIndex: number) => void;\n};\n\nfunction DiceColumn(props: RandomizedDiceColumnProperties) {\n  return (\n    <div className=\"randomized-dice-column-container\">\n      <div className=\"dice-column\">\n        <span className=\"die-box\">\n          <Die isRolling={props.isRolling} dieValue={props.die1Value}></Die>\n        </span>\n        <span className=\"die-box\">\n          <Die isRolling={props.isRolling} dieValue={props.die2Value}></Die>\n        </span>\n        <span className=\"die-box\">\n          <Die isRolling={props.isRolling} dieValue={props.die3Value}></Die>\n        </span>\n        <span className=\"die-box\">\n          <Die isRolling={props.isRolling} dieValue={props.die4Value}></Die>\n        </span>\n        <span className=\"die-box\">\n          <Die isRolling={props.isRolling} dieValue={props.die5Value}></Die>\n        </span>\n      </div>\n\n      {props.word ? (\n        <div>\n          <div className=\"result-word\">\n            {!props.isRolling && props.word ? props.word : '•••'}\n          </div>\n          <button\n            onClick={() => props.handleReRollClick(props.columnIndex)}\n            disabled={props.disableButtons}\n          >\n            Re-Roll\n          </button>\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default DiceColumn;\n","import { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport DiceColumn from './components/DiceColumn';\n\nconst wordList = require('./filtering_scripts/filtered_wordlist.json');\nconst fingerKeyMap = require('./filtering_scripts/fingerKeyMap.json');\nconst handKeyMap = require('./filtering_scripts/handKeyMap.json');\n\nfunction App() {\n  const [wordCount, setWordCount] = useState(6);\n  const [fingerMapType, setFingerMapType] = useState('jared');\n  const [showDice, setShowDice] = useState(true); // todo: remove\n  const [passPhase, setPassPhase] = useState('');\n  const [practicePassPhase, setPracticePassPhase] = useState('');\n  const [isColumnRollingMap, setIsColumnRollingMap] = useState(\n    new Map<number, boolean>()\n  );\n  const updateIsColumnRollingMap = (\n    columnIndex: number,\n    isRolling: boolean\n  ) => {\n    setIsColumnRollingMap(\n      new Map(isColumnRollingMap.set(columnIndex, isRolling))\n    );\n  };\n  const [diceValueMap, setDiceValueMap] = useState(\n    new Map<number, Map<number, number>>()\n  );\n  const updateDiceValueMap = (\n    columnIndex: number,\n    dieIndex: number,\n    value: number\n  ) => {\n    let diceColumnMap = diceValueMap.get(columnIndex);\n\n    if (diceColumnMap) {\n      diceColumnMap.set(dieIndex, value);\n    } else {\n      const dieMap = new Map<number, number>();\n      dieMap.set(dieIndex, value);\n      diceValueMap.set(columnIndex, dieMap);\n    }\n\n    diceColumnMap = diceValueMap.get(columnIndex);\n\n    setDiceValueMap(new Map(diceValueMap.set(columnIndex, diceColumnMap!)));\n  };\n  const [wordMap, setWordMap] = useState(new Map<number, string>());\n  const updateWordMap = (wordIndex: number, word: string) => {\n    setWordMap(new Map(wordMap.set(wordIndex, word)));\n  };\n  const [isMounted, setIsMounted] = useState(false);\n  const practicePassPhaseInputElement: React.RefObject<HTMLInputElement> =\n    useRef(null);\n  const [isRolling, setIsRolling] = useState(false);\n\n  useEffect(() => {\n    if (!isMounted) {\n      setIsMounted(true);\n      handleRollDiceClick();\n    }\n  }, []);\n\n  useEffect(() => {\n    setWordMap(new Map<number, string>());\n  }, [wordCount]);\n\n  function handleWordCountClick(count: number) {\n    setWordCount(count);\n    handleRollDiceClick();\n  }\n\n  function handlePassPhraseChange(event: React.ChangeEvent<HTMLInputElement>) {\n    setPracticePassPhase(event.target.value);\n  }\n\n  async function handleRollDiceClick() {\n    setWordMap(new Map<number, string>());\n    setIsRolling(true);\n    setPassPhase('');\n\n    for (let i = 0; i < wordCount; i++) {\n      updateIsColumnRollingMap(i, true);\n    }\n\n    setShowDice(true);\n\n    let previousWordLastCharacter = '';\n\n    for (let i = 0; i < wordCount; i++) {\n      const dieResultMap: Record<number, number> = {\n        1: 0,\n        2: 0,\n        3: 0,\n        4: 0,\n        5: 0,\n      };\n\n      let wordFound = false;\n\n      while (!wordFound) {\n        for (let j = 0; j < 5; j++) {\n          const rollResult = Math.floor(Math.random() * 6) + 1;\n          const dieId = j + 1;\n          dieResultMap[dieId] = rollResult;\n          updateDiceValueMap(i, j, rollResult);\n        }\n\n        const wordNumber =\n          +`${dieResultMap[1]}${dieResultMap[2]}${dieResultMap[3]}${dieResultMap[4]}${dieResultMap[5]}`;\n        const newWord = wordList[wordNumber];\n\n        if (newWord) {\n          const newWordFirstCharacter = newWord.substring(0, 1);\n\n          const isNewWordAllowed = isNewWordAllow(\n            previousWordLastCharacter,\n            newWordFirstCharacter\n          );\n\n          if (isNewWordAllowed) {\n            previousWordLastCharacter = newWord.substring(newWord.length - 1);\n\n            updateWordMap(i, newWord);\n            wordFound = true;\n          } else {\n            // console.log('word not allowed - ' + newWord);\n          }\n        }\n      }\n\n      await sleep(200);\n\n      updateIsColumnRollingMap(i, false);\n    }\n\n    const result = Array.from(wordMap.entries())\n      .reduce((wordList, wordEntry) => {\n        wordList.push(wordEntry[1]);\n\n        return wordList;\n      }, [] as string[])\n      .join('');\n\n    if (\n      practicePassPhaseInputElement &&\n      practicePassPhaseInputElement.current\n    ) {\n      practicePassPhaseInputElement.current.focus();\n    }\n\n    setPassPhase(result);\n    setIsRolling(false);\n  }\n\n  function getSeparateWordCharacterClass(\n    wordIndex: number,\n    character: string,\n    characterIndex: number\n  ): string {\n    let characterClass = '';\n\n    const word = wordMap.get(wordIndex);\n\n    if (word) {\n      const startingIndex = passPhase.indexOf(word);\n\n      if (\n        startingIndex === -1 ||\n        passPhase === '' ||\n        startingIndex + characterIndex >= practicePassPhase.length\n      ) {\n        characterClass = '';\n      } else if (\n        character === practicePassPhase[startingIndex + characterIndex]\n      ) {\n        characterClass = 'correct-character';\n      } else if (\n        character !== practicePassPhase[startingIndex + characterIndex]\n      ) {\n        characterClass = 'incorrect-character';\n      }\n    }\n\n    return characterClass;\n  }\n\n  function getCharacterClass(\n    character: string,\n    characterIndex: number\n  ): string {\n    let characterClass = '';\n\n    if (characterIndex >= practicePassPhase.length) {\n      characterClass = '';\n    } else if (character === practicePassPhase[characterIndex]) {\n      characterClass = 'correct-character';\n    } else if (character !== practicePassPhase[characterIndex]) {\n      characterClass = 'incorrect-character';\n    }\n\n    return characterClass;\n  }\n\n  function isNewWordAllow(\n    previousCharacter: string,\n    newCharacter: string\n  ): boolean {\n    // Check for Repeated character\n    if (previousCharacter === newCharacter) {\n      return false;\n    }\n\n    // Check for Repeated Finger Use\n    const previousCharacterFingerValue = fingerKeyMap[previousCharacter];\n    const newCharacterFingerValue = fingerKeyMap[newCharacter];\n\n    if (previousCharacterFingerValue === newCharacterFingerValue) {\n      return false;\n    }\n\n    // Check for Repeated Hand Use\n    // const previousCharacterHandValue = handKeyMap[previousCharacter];\n    // const newCharacterHandValue = handKeyMap[newCharacter];\n\n    // if (previousCharacterHandValue === newCharacterHandValue) {\n    //   return false;\n    // }\n\n    return true;\n  }\n\n  function sleep(ms: number): Promise<void> {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve();\n      }, ms);\n    });\n  }\n\n  async function handleReRollClick(columnIndex: number) {\n    setIsRolling(true);\n    updateIsColumnRollingMap(columnIndex, true);\n\n    for (let j = 0; j < 5; j++) {\n      updateDiceValueMap(columnIndex, j, 0);\n    }\n\n    await sleep(750);\n\n    const dieResultMap: Record<number, number> = {\n      1: 0,\n      2: 0,\n      3: 0,\n      4: 0,\n      5: 0,\n    };\n\n    let wordFound = false;\n\n    while (!wordFound) {\n      for (let j = 0; j < 5; j++) {\n        const rollResult = Math.floor(Math.random() * 6) + 1;\n        const dieId = j + 1;\n        dieResultMap[dieId] = rollResult;\n        updateDiceValueMap(columnIndex, j, rollResult);\n      }\n\n      const wordNumber =\n        +`${dieResultMap[1]}${dieResultMap[2]}${dieResultMap[3]}${dieResultMap[4]}${dieResultMap[5]}`;\n      const newWord = wordList[wordNumber];\n\n      if (newWord) {\n        const newWordFirstCharacter = newWord.substring(0, 1);\n        const newWordLastCharacter = newWord.substring(newWord.length - 1);\n        const previousWord = wordMap.get(columnIndex - 1);\n        let previousWordLastCharacter = '';\n\n        if (previousWord) {\n          previousWordLastCharacter = previousWord.substring(\n            previousWord.length - 1\n          );\n        }\n\n        const nextWord = wordMap.get(columnIndex + 1);\n        let nextWordFirstCharacter = '';\n\n        if (nextWord) {\n          nextWordFirstCharacter = nextWord.substring(0, 1);\n        }\n\n        const isNewWordAllowed =\n          isNewWordAllow(previousWordLastCharacter, newWordFirstCharacter) &&\n          isNewWordAllow(newWordLastCharacter, nextWordFirstCharacter);\n\n        if (isNewWordAllowed) {\n          previousWordLastCharacter = newWord.substring(newWord.length - 1);\n\n          updateWordMap(columnIndex, newWord);\n          wordFound = true;\n        } else {\n          // console.log('word not allowed - ' + newWord);\n        }\n      }\n    }\n\n    const result = Array.from(wordMap.entries())\n      .reduce((wordList, wordEntry) => {\n        wordList.push(wordEntry[1]);\n\n        return wordList;\n      }, [] as string[])\n      .join('');\n\n    setIsRolling(false);\n    setPassPhase(result);\n    updateIsColumnRollingMap(columnIndex, false);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Master Passphrase Generator</h1>\n      <h3>\n        A simple tool for securely generating a user friendly typing optimized\n        Passphrase\n      </h3>\n      <div className=\"description\">\n        This tool is strictly an offline tool. It does *<strong>not</strong>*\n        send any network requests nor saves any data in cookies or storage for\n        greater security.\n      </div>\n      <div className=\"description\">\n        How many words would you like in your passphrase?\n      </div>\n      <div>\n        <button\n          type=\"button\"\n          disabled={isRolling}\n          className={\n            wordCount === 3\n              ? 'selected-word-count-button word-count-button'\n              : 'word-count-button'\n          }\n          onClick={() => handleWordCountClick(3)}\n        >\n          3\n        </button>\n        <button\n          type=\"button\"\n          disabled={isRolling}\n          className={\n            wordCount === 4\n              ? 'selected-word-count-button word-count-button'\n              : 'word-count-button'\n          }\n          onClick={() => handleWordCountClick(4)}\n        >\n          4\n        </button>\n        <button\n          type=\"button\"\n          disabled={isRolling}\n          className={\n            wordCount === 5\n              ? 'selected-word-count-button word-count-button'\n              : 'word-count-button'\n          }\n          onClick={() => handleWordCountClick(5)}\n        >\n          5\n        </button>\n        <button\n          type=\"button\"\n          disabled={isRolling}\n          className={\n            wordCount === 6\n              ? 'selected-word-count-button word-count-button'\n              : 'word-count-button'\n          }\n          onClick={() => handleWordCountClick(6)}\n        >\n          6\n        </button>\n        <button\n          type=\"button\"\n          disabled={isRolling}\n          className={\n            wordCount === 7\n              ? 'selected-word-count-button word-count-button'\n              : 'word-count-button'\n          }\n          onClick={() => handleWordCountClick(7)}\n        >\n          7\n        </button>\n      </div>\n      <div className=\"finger-key-mapping\">\n        <label>\n          Finger Key Mappings\n          <select\n            value={fingerMapType}\n            onChange={(e) => setFingerMapType(e.target.value)}\n          >\n            <option value=\"jared\">jared</option>\n            <option value=\"standard\" disabled>\n              COMING SOON - standard\n            </option>\n          </select>\n        </label>\n      </div>\n      <div className=\"roll-all-dice-box\">\n        <button\n          type=\"button\"\n          className=\"roll-all-dice\"\n          disabled={isRolling}\n          onClick={handleRollDiceClick}\n        >\n          ROLL DICE!\n        </button>\n      </div>\n      {showDice ? (\n        <div className=\"column-box\">\n          <div className=\"columns\">\n            {new Array(wordCount).fill(0).map((value, index) => {\n              return (\n                <div key={index}>\n                  <DiceColumn\n                    columnIndex={index}\n                    isRolling={!!isColumnRollingMap.get(index)}\n                    word={wordMap.get(index) ? wordMap.get(index)! : ''}\n                    die1Value={diceValueMap.get(index)?.get(0)!}\n                    die2Value={diceValueMap.get(index)?.get(1)!}\n                    die3Value={diceValueMap.get(index)?.get(2)!}\n                    die4Value={diceValueMap.get(index)?.get(3)!}\n                    die5Value={diceValueMap.get(index)?.get(4)!}\n                    disableButtons={isRolling}\n                    handleReRollClick={handleReRollClick}\n                  ></DiceColumn>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      ) : null}\n      {!isRolling ? (\n        <div className=\"word-results\">\n          <div className=\"separate-words\">\n            {Array.from(wordMap.entries()).map(\n              (value: [number, string], index) => {\n                const word = value[1];\n\n                return (\n                  <div className=\"separate-word\" key={word + '_' + index}>\n                    {word.split('').map((character, characterIndex) => {\n                      return (\n                        <span\n                          key={\n                            character +\n                            '_' +\n                            word +\n                            '_' +\n                            index +\n                            '_' +\n                            characterIndex\n                          }\n                          className={`character ${getSeparateWordCharacterClass(\n                            index,\n                            character,\n                            characterIndex\n                          )}`}\n                        >\n                          {character}\n                        </span>\n                      );\n                    })}\n                  </div>\n                );\n              }\n            )}\n          </div>\n          <div>\n            {passPhase.split('').map((character, characterIndex) => {\n              return (\n                <span\n                  className={`character ${getCharacterClass(\n                    character,\n                    characterIndex\n                  )}`}\n                  key={character + '_' + characterIndex}\n                >\n                  {character}\n                </span>\n              );\n            })}\n          </div>\n          <h3>Practice new Pass-Phase</h3>\n          <input\n            type=\"text\"\n            className=\"pass-phase-practice-input\"\n            value={practicePassPhase}\n            onChange={handlePassPhraseChange}\n            ref={practicePassPhaseInputElement}\n            disabled={isRolling}\n          />\n        </div>\n      ) : (\n        <div className=\"result-placeholder\"></div>\n      )}\n\n      <div>\n        <h3>Inspired By:</h3>\n        <a href=\"https://diceware.dmuth.org\">Diceware Dmuth</a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}